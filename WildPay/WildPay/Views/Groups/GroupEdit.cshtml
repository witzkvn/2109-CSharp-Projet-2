@model WildPay.Models.Group
@using WildPay.Models

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Group</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)


        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="auteur-select">Membres du groupe</label>
            <input type="email" name="memberMail" />
        </div>

        <div>
            @{
                foreach (User user in ViewBag.listeUsers)
                {
                    <span>@user.Email</span>
                }
            }
        </div>

        <div class="expense-edition-buttons">

            @{
                if (Model.Id != 0)
                {
                    <a href="@Url.Action("DeleteGroup", "Groups", new { groupId = Model.Id })">
                        <input type="button" class="btn btn-warning" value="Supprimer" />
                    </a>
                }
            }

            <button class="btn btn-primary" type="submit">
                Valider
            </button>
        </div>

    </div>
}


@if (ViewBag.groupToDelete != null)
{
    Group groupASuppr = ViewBag.groupToDelete;
    @Html.Partial("_DeleteConfirmation", groupASuppr);
}