@using WildPay.Tools
@model WildPay.Models.User

@{
    if (Session["Id"] == null)
    {
        Response.Redirect("~/Connexion/Index");
    }
    string nomCompletUser = Utilities.GetNomCompletUser(Model);
}

<div class="account">
    <h2>Vos informations de compte</h2>

    <div class="box">
        <div class="user-header">
            <div class="user-image user-image-xl">
                @if (@Model.UserImageFile != null)
                {
                    <img src="@Model.UserImageFile" alt="Alternate Text" />
                }
                else
                {
                    <img src="~/Content/Images/default.png" alt="Alternate Text" />
                }

            </div>
            <h4>@nomCompletUser</h4>
        </div>

        @using (Html.BeginForm("Index", "Account", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="account-form">
                <hr />

                @Html.HiddenFor(model => model.Id)

                <div class="form-group">
                    <label for="NewUserImageFile">Photo de profil</label>
                    <input name="NewUserImageFile" type="file" id="user-image-input" />
                    @if (ViewBag.ImageUploadMessage != null || ViewBag.ImageUploadMessage != "")
                    {
                        <p class="error">@ViewBag.ImageUploadMessage</p>
                    }
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Firstname, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.TextBoxFor(model => model.Firstname, new { @class = "form-control", type = "text", minlength = 2, maxlength = 20 })
                    <p class="error">
                        @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
                    </p>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Lastname, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.TextBoxFor(model => model.Lastname, new { @class = "form-control", type = "text", minlength = 2, maxlength = 20 })
                    <p class="error">
                        @Html.ValidationMessageFor(model => model.Lastname, "", new { @class = "text-danger" })
                    </p>
                </div>

                <button class="btn btn-primary" type="submit">
                    Mettre à jour
                </button>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <p><span class="note">Note :</span> Pour changer votre Email ou votre mot de passe, veuillez contacter le service client.</p>
            </div>
        }
    </div>
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    let fileInput = document.getElementById('user-image-input');
    fileInput.addEventListener("change", (e) => {
        var files = fileInput.files;
        var fileSize = 0;
        if (files.length != 0) {
            fileSize = files[0].size;
        }
        if (fileSize > 2000000) {
            alert("Le fichier téléchargé est trop lourd !");
            fileInput.value = "";
            return false;
        }
    })
</script>