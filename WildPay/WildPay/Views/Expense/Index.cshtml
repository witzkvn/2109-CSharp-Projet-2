@using WildPay.Tools

@{

    if (Session["Id"] == null)
    {
        Response.Redirect("~/Connexion/Index");
    }
    string groupeName = @Utilities.GetPremiereLettreMajuscule((string)Session["groupname"]);
}

<div class="expense">
    @*<div class="groupe-name-title text-no-overflow box">Groupe : @Session["groupname"]</div>*@
    <h2>Groupe @groupeName</h2>
    <div class="row">
        <div class="flex">
            <h3>Dépenses</h3>
            <a class="button" href="@Url.Action("Index", "ExpenseEdition")">
                <ion-icon name="add-circle"></ion-icon>
                Ajouter une dépense
            </a>


            <div class="list-group">
            @if (ViewBag.Confirm != "")
            {
                <p class="message success">
                    @ViewBag.Confirm
                </p>
            }

                @foreach (var expense in ViewBag.listExpenses)
                {
                    <a href="@Url.Action("EditExpense", "ExpenseEdition", new { expenseId = expense.Id })" class="list-group-item box">
                        <h3 class="text-no-overflow">@expense.Title</h3>
                        @if (expense.UserImageFile != null)
                        {
                            <img class="user-image user-image-sm" src="@expense.UserImageFile" />
                        }
                        else
                        {
                            <img class="user-image user-image-sm" src="~/Content/Images/default.png" />
                        }
                        <p class="category span2 text-no-overflow">
                            @if (expense.Name != null)
                            {
                                @Utilities.GetPremiereLettreMajuscule(expense.Name)
                            }
                        </p>
                        <p class="espace span2 text-no-overflow">Payé par  @expense.Lastname.ToUpper() @Utilities.GetPremiereLettreMajuscule(@expense.Firstname) au groupe</p>
                        <p class="date">@expense.DateCourte</p>
                        <p class="expense-value">@expense.Value €</p>
                    </a>
                }
            </div>
        </div>
        <div class="flex fixed">
            <h3>Bilan</h3>
            <div class="expense-bilan">

                @foreach (var user in ViewBag.listeUsers)
                {
                    if (user.Id == ViewBag.userID && @ViewBag.SommesDues[user.Id] >= 0)
                    {
                        <h4 class="user-bilan">Vous devez <span class="text-secondary">@ViewBag.SommesDues[user.Id] €</span> au groupe</h4>
                    }
                    else if (user.Id == ViewBag.userID && @ViewBag.SommesDues[user.Id] < 0)
                    {
                        <h4 class="user-bilan">Le groupe vous doit <span class="text-primary">@(ViewBag.SommesDues[user.Id]*-1) €</span></h4>
                    }
                }

                @foreach (var user in ViewBag.listeUsers)
                {
                    if (@ViewBag.SommesDues[user.Id] > 0 && user.Id != ViewBag.userID)
                    {
                        <h4>@Utilities.GetNomCompletUser(user) doit <span class="text-secondary">@ViewBag.SommesDues[user.Id] €</span> au groupe</h4>
                    }
                }

                @foreach (var user in ViewBag.listeUsers)
                {
                    if (@ViewBag.SommesDues[user.Id] < 0 && user.Id != ViewBag.userID)
                    {
                        <h4>Le groupe doit <span class="text-primary">@(ViewBag.SommesDues[user.Id]*-1) €</span> à @Utilities.GetNomCompletUser(user)</h4>
                    }
                }

            </div>
            <button class="btn btn-transparent" id="expense-toggle-graph">Voir les graphiques</button>
            @if (ViewBag.listExpenses.Count > 0)
            {
                <div class="expense-graph" id="expense-graph">
                    <canvas id="myChart"></canvas>
                </div>
                <p class="expense-total">Total dépensé : @ViewBag.sommeTotale €</p>
                <div class="expense-graph" id="expense-graph2">
                    <canvas id="myChart2"></canvas>
                </div>
            }


        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let labelsValues = JSON.parse('@Html.Raw(Json.Encode(@ViewBag.expLabels))');
    let expValues = JSON.parse('@Html.Raw(Json.Encode(@ViewBag.expValues))');
    let labelsValues2 = JSON.parse('@Html.Raw(Json.Encode(@ViewBag.expLabels2))');
    let expValues2 = JSON.parse('@Html.Raw(Json.Encode(@ViewBag.expValues2))');


    let getColorsArray = (itemsNb) => {
        let colorsArray = [];
        for (let i = 0; i < itemsNb; i++) {
            let newColor = Math.floor(Math.random() * 16777215).toString(16);
            console.log(newColor)
            colorsArray.push(`#${newColor}`);

        }
        return colorsArray;
    }

    const data = {
        labels: labelsValues,
        datasets: [{
            label: 'My First Dataset',
            data: expValues,
            backgroundColor: [...getColorsArray(expValues?.length)],
            hoverOffset: 1,
            borderColor: "#d3d7d9",
            borderWidth: 1
        }]
    };

    const data2 = {
        labels: labelsValues2,
        datasets: [{
            label: ' ',
            data: expValues2,
            backgroundColor: [...getColorsArray(expValues2?.length)],
            hoverOffset: 1,
            borderColor: "#d3d7d9",
            borderWidth: 1
        }]
    };

    const config = {
        type: 'doughnut',
        data: data,
        options: {}
    };

    let graph2Height = expValues2.length * 3.5;
    document.getElementById("expense-graph2").style.height = `${graph2Height}vh`;


    const config2 = {
        type: 'bar',
        data: data2,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            indexAxis: 'y',
            plugins: {
                legend: {
                    display: false
                }
            },
            scaleShowValues: true,
            scales: {
                x: {
                    grid: {
                        drawOnChartArea: false,
                        borderColor: '#232323',
                        color: '#232323',
                    },
                    title: {
                        display: true,
                        text: 'Somme en €'
                    }
                },
                y: {
                    grid: {
                        display: false,
                        borderColor: '#232323'
                    },
                    ticks: {
                        autoSkip: false,
                    }
                }
            }
        }
    };

    const myChart = new Chart(
        document.getElementById('myChart'),
        config
    );

    const myChart2 = new Chart(
        document.getElementById('myChart2'),
        config2
    );


    let toggleGraphBtn = document.getElementById("expense-toggle-graph");
    toggleGraphBtn.addEventListener("click", (e) => {
        e.target.classList.toggle("active");
    });
</script>
